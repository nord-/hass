# solcellerna
- sensor:
  - unique_id: fronius_solar_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('var.solarenergy') }}"
    attributes:
      friendly_name: "Fronius solenergi (totalt)"

- sensor:
  - unique_id: fronius_solar_daily_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('var.solarenergy_daily') }}"
    attributes:
      friendly_name: "Fronius solenergi (idag)"

- sensor:
  - unique_id: fronius_solar_power
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ (states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(0) / 1000.0) | round(2) }}"
    attributes:
      friendly_name: "Fronius soleffekt"
          
- sensor:
  - unique_id: last_solarenergy_value
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    state: >-
      {% if is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unavailable') or is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unknown') %}
        {{ states('sensor.last_solarenergy_value') }}
      {% else %}
        {% set last_solarenergy_value = ((states('sensor.energy_total_fronius_inverter_1_192_168_2_31') | float / 1000) | float) %}
        {{ (states('sensor.energy_total_fronius_inverter_1_192_168_2_31')|float / 1000) | float }}
      {% endif %}
    attributes:
      friendly_name: "Solpanelerna, senaste energi"

- sensor:
  - unique_id: last_sp_kw
    unit_of_measurement: "kW"
    state: >-
      {% if is_state('sensor.aktuell_effekt', 'unavailable') or is_state('sensor.aktuell_effekt','unknown') %}
        0
      {% else %}
        {% set last_sp_kw = states("sensor.aktuell_effekt") %}
        {{ states("sensor.aktuell_effekt") }}
      {% endif %}
    attributes:
      friendly_name: "Senaste effekt"

# elpriser
- sensor: 
  - unique_id: nordpool_current_price
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "SEK/kWh"
    state: "{{ states('sensor.nordpool_kwh_se3_sek_3_095_0') | float | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (ex. moms)"

  - unique_id: nordpool_avg_price_vat
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "SEK/kWh"
    state: "{{ (state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'average')|float*1.25)|round(2) }}"
    attributes:
      friendly_name: "Genomsnittligt elpris (inkl. moms)"

- sensor: 
  - unique_id: nordpool_current_price_vat
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "SEK/kWh"
    state: "{{ (states('sensor.nordpool_kwh_se3_sek_3_095_0') | float * 1.25) | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (inkl. moms)"    

- binary_sensor:
  - unique_id: nordpool_tomorrow_valid
    state: "{{ state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow_valid') and state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow')|length > 23 }}"

- sensor:
  - unique_id: nordpool_tomorrow_avg
    state: >-
      {% set nordpool = namespace(tomorrow = []) -%}
      {%- if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") -%}
        {%- for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") -%}
            {%- set nordpool.tomorrow = nordpool.tomorrow + [num] -%}
        {%- endfor -%}
        {{ "%.2f" | format(((nordpool.tomorrow | sum / nordpool.tomorrow | count) | float * 1.25)|float)  }}
      {%- endif %}
- sensor:
  - unique_id: nordpool_tomorrow_max
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | max | float * 1.25)|float) }}
      {% endif %}
- sensor:
  - unique_id: nordpool_tomorrow_min
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | min | float * 1.25)|float) }}
      {% endif %}

- sensor:
  - unique_id: elpris_kr
    state: >-
      {{ states('sensor.template_nordpool_current_price_vat') | float(0) 
          + ((states('var.electric_tax') | float / 100.0)|float) 
          + ((states('var.electric_transfer_cost') | float / 100.0)|float) 
          + ((states('var.electric_fee') | float / 100.0)|float) }}
    unit_of_measurement: kr/kWh
    device_class: monetary
    state_class: measurement
    attributes:
      friendly_name: "Elpris, totalt (kr)"

  - unique_id: elpris_solar_kr
    state: >-
      {{ states('sensor.nordpool_kwh_se3_sek_3_095_0') | float(0) 
          + ((states('var.electric_solar_markup') | float / 100.0)|float) 
          + ((states('var.electric_solar_net_markup') | float / 100.0)|float) 
          + ((states('var.electric_solar_tax_refund') | float / 100.0)|float) }}
    unit_of_measurement: kr/kWh
    device_class: monetary
    state_class: measurement
    attributes:
      friendly_name: "Elpris försäljning, totalt (kr)"

# - sensor:
#   - unique_id: elpris_avg_kr
#     state: >-
#       {{ states('sensor.template_nordpool_avg_price_vat') | float(0) 
#           + ((states('var.electric_tax') | float / 100.0)|float) 
#           + ((states('var.electric_transfer_cost') | float / 100.0)|float) 
#           + ((states('var.electric_fee') | float / 100.0)|float) }}
#     unit_of_measurement: kr
#     device_class: monetary
#     attributes:
#       friendly_name: "Elpris, genomsnitt (kr)"
      
# elförbrukning, huset
- sensor:
  - unique_id: house_net_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ ((states('sensor.hem_gen5_electric_consumed_w') | float(0)) / (-1000)) | round(2) }}"
    attributes:
      friendly_name: "Husets nettoeffekt"
- sensor:
  - unique_id: house_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ ((states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(default=0.0) + states('sensor.hem_gen5_electric_consumed_w') | float) / 1000) | round(2) }}"
    attributes:
      friendly_name: "Husets effekt (kW)"
- sensor:
  - unique_id: grid_power_kw
    state: "{{ (states('sensor.hem_gen5_electric_consumed_w') | float / 1000) | round(2) }}"
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Näteffekt (kW)"
- sensor:
  - unique_id: house_net_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
    state: >-
      {{ states('sensor.hem_gen5_electric_consumed_kwh') | float + states('var.solarenergy') | float }}
    # {{ (states('sensor.hem_gen5_electric_consumed_kwh') | float) + states('sensor.template_last_solarenergy_value') | float(0) }}
    attributes:
      friendly_name: "Husets nettoenergi"

## house consumed from grid
- sensor:
  - unique_id: house_power_w
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Husets effekt (W)"
    state: >-
      {% set pwr = 0.0 -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_1') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_1') | float -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_2') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_2') | float + pwr -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_3') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_3') | float + pwr -%}
      {%- endif %}
      {{pwr}}

## sold to grid
- sensor:
  - unique_id: current_sold_grid
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
    state: >-
      {% set sold = 0.0 -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_1') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_1') | float -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_2') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_2') | float + sold -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_3') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_3') | float + sold -%}
      {%- endif %}
      {{sold | float * -1}}
    attributes:
      friendly_name: "Såld effekt"

# väder
- sensor:
  - unique_id: yrwthr
    state: "{%set badWeatherList = 'cloudy','fog','heavyrain','heavyrainandthunder','heavyrainshowers','heavyrainshowersandthunder','heavysleet','heavysleetandthunder','heavysleetshowers','heavysleetshowersandthunder','heavysnow','heavysnowandthunder','heavysnowshowers','heavysnowshowersandthunder','lightrain','lightrainandthunder','lightrainshowers','lightrainshowersandthunder','lightsleet','lightsleetandthunder','lightsleetshowers','lightsnow','lightsnowandthunder','lightsnowshowers','lightssleetshowersandthunder','lightssnowshowersandthunder','rain','rainandthunder','rainshowers','rainshowersandthunder','sleet','sleetandthunder','sleetshowers','sleetshowersandthunder','snow','snowandthunder','snowshowers','snowshowersandthunder'%}{{states('sensor.yr_symbol') in badWeatherList}}"
    attributes:
      friendly_name: "Dåligt väder enligt YR"

- sensor: 
  - unique_id: sunelevation
    unit_of_measurement: "°"
    state: "{{ states.sun.sun.attributes.elevation | round(1) }}"
    attributes:
      friendly_name: "Solvinkel"
# gräsklipparen
- sensor:
  - unique_id: walle_battery_level
    unit_of_measurement: "%"
    state: "{{ state_attr('vacuum.wall_e', 'battery_level') | int(0) }}"
    attributes:
      friendly_name: "Wall-E batteri"
  - unique_id: walle_blade_hours
    unit_of_measurement: "h"
    state: "{{ (state_attr('vacuum.wall_e','blades').current_on | int(0) / 60) | round(0)}}"
    attributes:
      friendly_name: "Wall-E bladtid"

# förbrukning/kostnad
- sensor:
  - unique_id: washing_machine_cost
    state: "{{ (states('sensor.clever_spz2_electric_consumption_w_2') | float/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary
    
- sensor:
  - unique_id: dishwasher_machine_cost
    state: "{{ (states('sensor.clever_spz3_electric_consumption_w') | float/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary
    
- sensor:
  - unique_id: garage_heating_cost
    state: "{{ (states('sensor.popp_outdoor_power') | float(0)/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary

- sensor:
  - unique_id: house_cost
    state: "{{ states('sensor.template_house_power_w')|float(0)/1000 * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary

- sensor:
  - unique_id: spot_gain_loss_daily
    state: "{{ ((states('sensor.energy_x_cost_24_hrs')|float / (states('sensor.energy_used_24_hrs')|float * states('sensor.elpriset_kr_avg')|float)-1)*100)|round }}"
    unit_of_measurement: '%'

- sensor:
  - unique_id: my_avg_spot_price
    state: "{{ (states('sensor.energy_x_cost_24_hrs')|float / states('sensor.energy_used_24_hrs')|float)|round(2) }}"
    unit_of_measurement: kr
    device_class: monetary
    attributes:
      friendly_name: "Snittpris (24 hrs)"

# bilar
## Teslan
# - sensor:
#   - unique_id: aza_mileage
#     unit_of_measurement: 'mil'
#     icon: mdi:counter
#     state: "{{ ((states('sensor.azarel_odometer') | float(0))/10) | round }}"
#     attributes:
#       friendly_name: "Körsträcka"

# - sensor:
#   - unique_id: aza_last_update
#     state: "{{ as_timestamp(states.sensor.azarel_battery.last_updated) | timestamp_custom('%H:%M, %d %b') }}"
#     attributes:
#       friendly_name: "Senast uppdaterad"

# - sensor:
#   - unique_id: aza_charging_rate
#     unit_of_measurement: "kW"
#     device_class: power
#     state_class: measurement
#     state: "{{ (states('sensor.azarel_charging_rate') | float(0)/1564*230) | round(1) }}"
#     attributes:
#       friendly_name: "Azarel effekt"
    
# - sensor:
#   - unique_id: aza_charging_cost
#     unit_of_measurement: kr
#     device_class: monetary
#     state_class: total_increasing
#     state: >-
#       {{ states('sensor.template_aza_energy_home') | float(0) * states('sensor.template_elpris_kr') | float }}

# - sensor:
#   - unique_id: aza_power_home
#     unit_of_measurement: "kW"
#     device_class: power
#     state_class: measurement
#     state: >-
#       {% if is_state('device_tracker.azarel_location_tracker','home') -%}
#         {{ states('sensor.template_aza_charging_rate') | float(0) }}
#       {%- else -%}
#         {{ 0 | float }}
#       {%- endif -%}

# - sensor:
#   - unique_id: aza_energy_home
#     unit_of_measurement: "kWh"
#     device_class: energy
#     state_class: total_increasing
#     state: "{{ states('var.aza_energy_last_session') }}"
#       # {% if is_state('device_tracker.azarel_location_tracker','home') -%}
#       #   {{ states('sensor.azarel_energy_added') | float(0) }}
#       # {%- else -%}
#       #   {{ 0 | float }}
#       # {%- endif -%}

# - sensor:
#   - unique_id: aza_charging_required_time
#     state: >-
#       {%- set time = (states('number.azarel_charge_limit')|float(0) - states('sensor.azarel_battery')|float(0)) /100*51/11 -%}
#       {%- set hours = time|int -%}
#       {%- set minutes = ((time - hours)*60)|int -%}
#       {{ '{:02}:{:02}'.format(hours, minutes) }}

# - sensor:
#   - unique_id: aza_req_hours
#     state: >-
#       {{ ((states('number.azarel_charge_limit')|float(0) - states('sensor.azarel_battery')|float(0)) /100*51/8) | round(0, 'ceil') if is_state('binary_sensor.azarel_charger','on') and is_state('automation.ladda_bilen_nar_det_ar_billigt','on') else 0 }}

## Zoe:n
- sensor:
  - unique_id: zoe_charging_cost
    state: "{{ states('sensor.zoe_charging_power') | float(0) * states('sensor.template_elpris_kr') | float }}"
    device_class: monetary
    unit_of_measurement: "kr"

- sensor:
  - unique_id: zoe_power_kw
    state: "{{ states('sensor.zoe_charging_power') | float(0) }}"
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement

- sensor:
  - unique_id: zoe_last_update
    state: "{{ as_timestamp(states('sensor.zoe_last_battery_activity')) | timestamp_custom('%H:%M, %d %b') }}"
    attributes:
      friendly_name: "Senast uppdaterad"

- sensor:
  - unique_id: zoe_req_hours
    state: >-
      {{ ((100-states("sensor.zoe_battery_level")|int) /100*40/6)|round(0, 'ceil') if is_state('automation.ladda_fridas_bil','on') or is_state('automation.ladda_zoe_pa_tid','on') else 0 }}

## Spabadet
- sensor:
  - unique_id: spabadet_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    attributes:
      friendly_name: "Spabadet, energi [kWh]"
    state: >-
      {{ states('sensor.spabadet_l1_energy')|float + states('sensor.spabadet_l2_energy')|float + states('sensor.spabadet_l3_energy')|float }}

  - unique_id: spabadet_energy_lastmonth_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state: "{{ state_attr('sensor.spabadet_kwh_man','last_period')|float(0)|round(0) }}"
    attributes:
      friendly_name: "Spabadet, energi förra mån [kWh]"

  - unique_id: spabadet_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, effekt [kW]"
    state: >-
      {{ ((states('sensor.spabadet_l1_power')|float + states('sensor.spabadet_l2_power')|float + states('sensor.spabadet_l3_power')|float)/1000)|round(2) }}

- sensor:
  - unique_id: spabadet_cost_kr
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{ states('sensor.template_elpris_kr')|float * states('sensor.template_spabadet_power_kw')|float }}"

- sensor: 
  - unique_id: spabadet_l1_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L1 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l1_power')|float / states('sensor.hem_gen5_electric_produced_v_2') | float(230)) | round(2) }}

  - unique_id: spabadet_l2_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L2 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l2_power')|float / states('sensor.hem_gen5_electric_produced_v_2_2') | float(230)) | round(2) }}

  - unique_id: spabadet_l3_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L3 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l3_power')|float / states('sensor.hem_gen5_electric_produced_v_3') | float(230)) | round(2) }}

- sensor:
  - unique_id: spabadet_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    state: "{{ states('sensor.247_temperature')|float }}"

## Räkna ut bästa laddperiod
- trigger:
    - platform: time_pattern
      hours: "/1"
    - platform: state
      entity_id: sensor.template_zoe_req_hours
      to:
    - platform: state
      entity_id: input_datetime.zoe_before
      to:
    # - platform: state
    #   entity_id: sensor.template_aza_req_hours
    #   to:
  sensor:
  - unique_id: next_charge
    device_class: timestamp
    state: >-
      {#%set duration = states('sensor.template_aza_req_hours')|int + states('sensor.template_zoe_req_hours')|int%#}
      {% set duration = states('sensor.template_zoe_req_hours')|int%}
      {% set before = today_at(states('input_datetime.zoe_before'))+timedelta(minutes=5) 
          if now() < today_at(states('input_datetime.zoe_before')) 
          else today_at(states('input_datetime.zoe_before'))+timedelta(days=1,minutes=5) %}
      {% if not duration -%}
        unavailable
      {% else %}
        {% set grow = namespace(value=0) %}
        {% set priceDict = namespace(value = []) %}
        {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_today')|list %}
        {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_tomorrow')|list%}
        {% if tomorrow | length > 1%}
          {% set prices = prices + tomorrow%}
        {% endif%}
        {% for p in prices%}
          {%set priceDict.value = priceDict.value + [(loop.index, (p.start, p.value))] %}
        {% endfor%}
      
        {% set dataDict = dict.from_keys(priceDict.value) %}
      
        {% set priceDict.value = [] %}
        {% for p in dataDict.items() -%}
          {% set outerIndex = loop.index -%}
          {% if loop.index+duration-1 <= dataDict|length 
              and p[1][0]+timedelta(hours=duration) <= before -%}
            {% for i in range(duration) %}
              {% set grow.value = grow.value + dataDict[i+outerIndex][1] %}
            {% endfor %}
            {%- set val = (grow.value|float/duration)|round(3) %}
            {%- set grow.value = 0 %}
            {%- set priceDict.value = priceDict.value + [(p[1][0], val)] %}
          {% else %}
            {% set priceDict.value = priceDict.value + [(p[1][0], 999.9)] %}
          {% endif %}
        {% endfor %}
        {{ (priceDict.value|sort(attribute='1'))|map(attribute='0')|select('ge',now()-timedelta(minutes=55))|first }}
      {% endif %}
    attributes:
      friendly_name: "Charge period"
      all: >-
        {%set duration = states('sensor.template_zoe_req_hours')|int%}
        {% set grow = namespace(value=0) %}
        {% set priceDict = namespace(value = []) %}
        {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','today')|list %}
        {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','tomorrow')|list%}
        {% if tomorrow | length > 1%}
          {% set prices = prices + tomorrow%}
        {% endif%}
        {% for p in prices%}
          {%set priceDict.value = priceDict.value + [(loop.index-1, p)]%}
        {% endfor%}
    
        {% set dataDict = dict.from_keys(priceDict.value) %}
    
        {% set priceDict.value = [] %}
        {% for p in dataDict.items() %}
          {% set outerIndex = loop.index %}
          {% if loop.index+duration-1 <= dataDict|length %}
            {% for i in range(duration) %}
              {% set grow.value = grow.value + dataDict[i+outerIndex-1] %}
            {% endfor %}
            {%- set val = (grow.value|float/duration)|round(3) %}
            {%- set grow.value = 0 %}
            {%- set priceDict.value = priceDict.value + [(p[0], val)] %}
          {% else %}
            {% set priceDict.value = priceDict.value + [(p[0], 999.9)] %}
          {% endif %}
        {% endfor %}
        {% set data = dict.from_values(priceDict.value).items()|sort(attribute='1') %}
        {% set priceDict.value = [] %}
        {% for d in data -%}
          {% set t1 = '%02d:00' % (d[0] if d[0]<24 else d[0]-24) -%}
          {% set time1 = '%02d:00' % d[0] if d[0]<24 else '%02d:00⁺¹' % (d[0]-24) -%}
          {% set time2 = '%02d:00' % (d[0]+duration) if (d[0]+duration)<24 else '%02d:00⁺¹' % (d[0]+duration-24) -%}
          {% set priceDict.value = priceDict.value + [time1 ~ '-' ~ time2 ~ ', ' ~ d[1]|round(2)] %}
        {% endfor -%}
        {{ priceDict.value }}

  - unique_id: next_low_price
    device_class: timestamp
    state: >-
      {% set priceDict = namespace(value = []) %}
      {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_today')|list %}
      {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_tomorrow')|list%}
      {% if tomorrow | length > 1%}
        {% set prices = prices + tomorrow%}
      {% endif%}
      {% for p in prices%}
        {% set priceDict.value = priceDict.value + [(loop.index, (p.start, p.value))] %}
      {% endfor%}
      {% set dataDict = dict.from_keys(priceDict.value) %}
      {% set priceDict.value = [] %}
      {% for p in dataDict.items() -%}
        {% if (dataDict[loop.index][0] >= now() and (dataDict[loop.index][1]|float) < state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'average')|float) -%}
          {% set priceDict.value = priceDict.value + [dataDict[loop.index][0]] %}
        {% endif -%}
      {% endfor %}
      {% if priceDict.value %}
        {{ priceDict.value|first }}
      {% else %}
        undefined
      {% endif %}