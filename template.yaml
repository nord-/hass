# solcellerna
- sensor:
  - unique_id: fronius_solar_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('var.solarenergy') }}"
    attributes:
      friendly_name: "Fronius solenergi (totalt)"

  - unique_id: fronius_solar_daily_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('var.solarenergy_daily') }}"
    attributes:
      friendly_name: "Fronius solenergi (idag)"

  - unique_id: fronius_solar_power
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ (states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(0) / 1000.0) | round(2) }}"
    attributes:
      friendly_name: "Fronius soleffekt"

  - unique_id: last_solarenergy_value
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    state: >-
      {% if is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unavailable') or is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unknown') %}
        {{ states('sensor.last_solarenergy_value') }}
      {% else %}
        {% set last_solarenergy_value = ((states('sensor.energy_total_fronius_inverter_1_192_168_2_31') | float / 1000) | float) %}
        {{ (states('sensor.energy_total_fronius_inverter_1_192_168_2_31')|float / 1000) | float }}
      {% endif %}
    attributes:
      friendly_name: "Solpanelerna, senaste energi"

  - unique_id: last_sp_kw
    unit_of_measurement: "kW"
    state: >-
      {% if is_state('sensor.aktuell_effekt', 'unavailable') or is_state('sensor.aktuell_effekt','unknown') %}
        0
      {% else %}
        {% set last_sp_kw = states("sensor.aktuell_effekt") %}
        {{ states("sensor.aktuell_effekt") }}
      {% endif %}
    attributes:
      friendly_name: "Senaste effekt"

  - unique_id: fronius_solar_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    state: "{{ (states('sensor.fronius_inverter_total_current')|float(0)/3)|round(1) }}"
    attributes:
      friendly_name: "Fronius ström (per fas) [A]"

# elpriser
- sensor: 
  - unique_id: nordpool_current_price
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    state: "{{ states('sensor.nordpool_kwh_se3_sek_3_095_0') | float | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (ex. moms)"
  - unique_id: nordpool_avg_price_vat
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    state: "{{ (state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'average')|float*1.25)|round(2) }}"
    attributes:
      friendly_name: "Genomsnittligt elpris (inkl. moms)"
  - unique_id: nordpool_current_price_vat
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    state: "{{ (states('sensor.nordpool_kwh_se3_sek_3_095_0') | float * 1.25) | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (inkl. moms)"    
  - unique_id: nordpool_tomorrow_avg
    state: >-
      {% set nordpool = namespace(tomorrow = []) -%}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {%- if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") -%}
        {%- for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") -%}
            {%- set nordpool.tomorrow = nordpool.tomorrow + [num+fees] -%}
        {%- endfor -%}
        {{ "%.2f" | format(((nordpool.tomorrow | sum / nordpool.tomorrow | count) | float * 1.25)|float)  }}
      {%- endif %}
  - unique_id: nordpool_tomorrow_max
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num+fees] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | max | float * 1.25)|float) }}
      {% endif %}
  - unique_id: nordpool_tomorrow_min
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num+fees] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | min | float * 1.25)|float) }}
      {% endif %}
  - unique_id: nordpool_avg
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    attributes:
      friendly_name: "Elpriset (avg)"
    state: >-
      {% set nordpool = namespace(today = []) -%}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {%- for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","today") -%}
          {%- set nordpool.today = nordpool.today + [num+fees] -%}
      {%- endfor -%}
      {{ "%.2f" | format(((nordpool.today | sum / nordpool.today | count) | float * 1.25)|float)  }}
  - unique_id: nordpool_max
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    attributes:
      friendly_name: "Elpriset (max)"
    state: >-
      {% set nordpool = namespace(today = []) %}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","today") %}
          {% set nordpool.today = nordpool.today + [num+fees] %}
      {% endfor %}
      {{ "%.2f" | format((nordpool.today | max | float * 1.25)|float) }}
  - unique_id: nordpool_min
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "kr"
    attributes:
      friendly_name: "Elpriset (min)"
    state: >-
      {% set nordpool = namespace(today = []) %}
      {% set fees = states("sensor.template_fees_ex_vat")|float(0) %}
      {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","today") %}
          {% set nordpool.today = nordpool.today + [num+fees] %}
      {% endfor %}
      {{ "%.2f" | format((nordpool.today | min | float * 1.25)|float) }}      

  - unique_id: elpris_kr
    state: >-
      {{ '%.2f' | format((states('sensor.nordpool_kwh_se3_sek_3_095_0')|float(0) + states("sensor.template_fees_ex_vat")|float)*1.25) }}
    unit_of_measurement: kr
    device_class: monetary
    state_class: measurement
    attributes:
      friendly_name: "Elpris, totalt [kr]"
  - unique_id: elpris_solar_kr
    state: >-
      {{ states('sensor.nordpool_kwh_se3_sek_3_095_0')|float(0) + states("sensor.template_fees_solar")|float }}
    unit_of_measurement: kr
    device_class: monetary
    state_class: measurement
    attributes:
      friendly_name: "Elpris försäljning, totalt [kr]"

  - unique_id: fees_ex_vat
    attributes:
      friendly_name: "Elavgifter, exkl. moms [kr]"
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{(states('var.electric_tax')|float + states('var.electric_transfer_cost')|float + states('var.electric_fee')|float)*0.008}}"
  - unique_id: fees_inc_vat
    attributes:
      friendly_name: "Elavgifter, inkl. moms [kr]"
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{((states('var.electric_tax')|float + states('var.electric_transfer_cost')|float + states('var.electric_fee')|float)/100.0)|round(2)}}"
  - unique_id: fees_solar
    attributes:
      friendly_name: "Solel, påslag [kr]"
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{((states('var.electric_solar_markup')|float + states('var.electric_solar_net_markup')|float + states('var.electric_solar_tax_refund')|float)/100.0)|round(2)}}"
  

  - unique_id: nordpool_median
    attributes:
      friendly_name: "Nordpool, median [kr]"
    state: >-
      {% set fees = states('sensor.template_fees_ex_vat')|float -%}
      {% set nordpool = namespace(price = []) -%}
      {% for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','today') -%}
      {%   set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {% endfor -%}
      {% if not is_state('binary_sensor.template_nordpool_tomorrow_valid','off') -%}
      {%   for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','tomorrow') -%}
      {%     set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {%   endfor -%}
      {% endif -%}
      {% set sortednp = nordpool.price|sort -%}
      {% set ix = namespace(x = 0) %}
      {% for n in sortednp -%}
      {%   if ix.x == ((sortednp|count)/2-1)|int -%}
      {{ '%.2f' | format(n) }}
      {%   endif -%}
      {%   set ix.x = ix.x + 1 -%}
      {% endfor -%}
  - unique_id: nordpool_75perc
    attributes:
      friendly_name: "Nordpool, 75 percentilen [kr]"
    state: >-
      {% set fees = states('sensor.template_fees_ex_vat')|float -%}
      {% set nordpool = namespace(price = []) -%}
      {% for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','today') -%}
      {%   set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {% endfor -%}
      {% if not is_state('binary_sensor.template_nordpool_tomorrow_valid','off') -%}
      {%   for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','tomorrow') -%}
      {%     set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {%   endfor -%}
      {% endif -%}
      {% set sortednp = nordpool.price|sort -%}
      {% set ix = namespace(x = 0) %}
      {% for n in sortednp -%}
      {%   if ix.x == ((sortednp|count)*0.75-1)|int -%}
      {{ '%.2f' | format(n) }}
      {%   endif -%}
      {%   set ix.x = ix.x + 1 -%}
      {% endfor -%}
  - unique_id: nordpool_25perc
    attributes:
      friendly_name: "Nordpool, 25 percentilen [kr]"
    state: >-
      {% set fees = states('sensor.template_fees_ex_vat')|float -%}
      {% set nordpool = namespace(price = []) -%}
      {% for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','today') -%}
      {%   set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {% endfor -%}
      {% if not is_state('binary_sensor.template_nordpool_tomorrow_valid','off') -%}
      {%   for num in state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','tomorrow') -%}
      {%     set nordpool.price = nordpool.price + [(num+fees)*1.25] -%}
      {%   endfor -%}
      {% endif -%}
      {% set sortednp = nordpool.price|sort -%}
      {% set ix = namespace(x = 0) %}
      {% for n in sortednp -%}
      {%   if ix.x == ((sortednp|count)*0.25-1)|int -%}
      {{ '%.2f' | format(n) }}
      {%   endif -%}
      {%   set ix.x = ix.x + 1 -%}
      {% endfor -%}

- binary_sensor:
  - unique_id: nordpool_tomorrow_valid
    state: "{{ state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow_valid') and state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow')|length > 23 }}"
  - unique_id: nordpool_price_low
    attributes:
      friendly_name: "Nordpool, under median"
    state: >-
      {{ states('sensor.template_elpris_kr') <= states('sensor.template_nordpool_median') }}
  - unique_id: nordpool_price_not_high
    attributes:
      friendly_name: "Nordpool, under 75:e percentilen"
    state: >-
      {{ states('sensor.template_elpris_kr') <= states('sensor.template_nordpool_75perc') or states('sensor.template_elpris_kr') < states('sensor.elpriset_kr_avg_3') }}
    # {{ states('sensor.template_elpris_kr') <= states('sensor.template_nordpool_75perc') }}
  - unique_id: nordpool_price_reallow
    attributes:
      friendly_name: "Nordpool, under 25:e percentilen"
    state: >-
      {{ states('sensor.template_elpris_kr') <= states('sensor.template_nordpool_25perc') }}

# - sensor:
#   - unique_id: elpris_avg_kr
#     state: >-
#       {{ states('sensor.template_nordpool_avg_price_vat') | float(0) 
#           + ((states('var.electric_tax') | float / 100.0)|float) 
#           + ((states('var.electric_transfer_cost') | float / 100.0)|float) 
#           + ((states('var.electric_fee') | float / 100.0)|float) }}
#     unit_of_measurement: kr
#     device_class: monetary
#     attributes:
#       friendly_name: "Elpris, genomsnitt (kr)"
      
# elförbrukning, huset
- sensor:
  - unique_id: grid_power_kw
    state: "{{((states('sensor.hem_gen5_electric_consumed_v')|float(0) * states('sensor.hem_gen5_electric_consumed')|float)/1000.0)|round(2)}}"
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Näteffekt [kW]"

  - unique_id: house_net_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ (states('sensor.template_grid_power_kw')|float(0) * -1)|round(2) }}"
    attributes:
      friendly_name: "Husets nettoeffekt"

  - unique_id: house_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{(((states('sensor.power_ac_fronius_inverter_1_192_168_2_31')|float(default=0))/1000)|float + states('sensor.template_grid_power_kw')|float)|round(2)}}"
    attributes:
      friendly_name: "Husets effekt (kW)"

  - unique_id: house_net_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
    state: >-
      {% if states('sensor.hem_gen5_electric_consumed_kwh')|is_number and 
            states('var.solarenergy')|is_number %}
        {{ states('sensor.hem_gen5_electric_consumed_kwh')|float(0) + states('var.solarenergy')|float(0) }}
      {% else %}
        {{ this.state }}
      {% endif %}
    attributes:
      friendly_name: "Husets nettoenergi"

  - unique_id: house_energy_wo_evcharging
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
    state: "{{ states('sensor.template_house_net_energy_kwh')|float(0) - states('sensor.template_chargenode_energy_kwh')|float(0) }}"
    attributes:
      friendly_name: "Husets nettoenergi exkl laddning [kWh]"

## house consumed from grid
- sensor:
  - unique_id: house_power_w
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Husets effekt (W)"
    state: >-
      {% set pwr = 0.0 -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_2')|float(0) * states('sensor.hem_gen5_electric_consumed_1')|float(0)) > 0 -%}
        {%- set pwr = (states('sensor.hem_gen5_electric_consumed_v_2')|float * states('sensor.hem_gen5_electric_consumed_1')|float(0)) -%}
      {%- endif -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_2_2')|float(0) * states('sensor.hem_gen5_electric_consumed_2')|float(0)) > 0 -%}
        {%- set pwr = (states('sensor.hem_gen5_electric_consumed_v_2_2')|float * states('sensor.hem_gen5_electric_consumed_2')|float(0)) + pwr -%}
      {%- endif -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_3')|float(0) * states('sensor.hem_gen5_electric_consumed_3')|float(0)) > 0 -%}
        {%- set pwr = (states('sensor.hem_gen5_electric_consumed_v_3')|float * states('sensor.hem_gen5_electric_consumed_3')|float(0)) + pwr -%}
      {%- endif %}
      {{pwr}}

## sold to grid
- sensor:
  - unique_id: current_sold_grid
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
    state: >-
      {% set sold = 0.0 -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_2')|float(0) * states('sensor.hem_gen5_electric_consumed_1')|float(0)) < 0 -%}
        {%- set sold = (states('sensor.hem_gen5_electric_consumed_v_2')|float(0) * states('sensor.hem_gen5_electric_consumed_1')|float(0)) -%}
      {%- endif -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_2_2')|float(0) * states('sensor.hem_gen5_electric_consumed_2')|float(0)) < 0 -%}
        {%- set sold = (states('sensor.hem_gen5_electric_consumed_v_2_2')|float(0) * states('sensor.hem_gen5_electric_consumed_2')|float(0)) + sold -%}
      {%- endif -%}
      {%- if (states('sensor.hem_gen5_electric_consumed_v_3')|float(0) * states('sensor.hem_gen5_electric_consumed_3')|float(0)) < 0 -%}
        {%- set sold = (states('sensor.hem_gen5_electric_consumed_v_3')|float(0) * states('sensor.hem_gen5_electric_consumed_3')|float(0)) + sold -%}
      {%- endif %}
      {{sold | float(0) * -1}}
    attributes:
      friendly_name: "Såld effekt"
## värmepumpen 
- sensor:
  - unique_id: heatpump_ivt_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
    attributes:
      friendly_name: "Värmepump IVT, effekt [W]"
    state: >-
      {% if states('sensor.shellyem3_c45bbe55c55e_channel_a_power')|is_number and
            states('sensor.shellyem3_c45bbe55c55e_channel_b_power')|is_number and 
            states('sensor.shellyem3_c45bbe55c55e_channel_c_power')|is_number %}
        {{ states('sensor.shellyem3_c45bbe55c55e_channel_a_power')|float(0) +
            states('sensor.shellyem3_c45bbe55c55e_channel_b_power')|float(0) + 
            states('sensor.shellyem3_c45bbe55c55e_channel_c_power')|float(0) }}
      {% else %}
        {{ this.state }}
      {% endif %}
  - unique_id: heatpump_ivt_energy
    device_class: energy
    state_class: total
    unit_of_measurement: "kWh"
    attributes:
      friendly_name: "Värmepump IVT, energi [kWh]"
    state: >-
      {% if states('sensor.shellyem3_c45bbe55c55e_channel_a_energy')|is_number and
            states('sensor.shellyem3_c45bbe55c55e_channel_b_energy')|is_number and 
            states('sensor.shellyem3_c45bbe55c55e_channel_c_energy')|is_number %}
        {{ states('sensor.shellyem3_c45bbe55c55e_channel_a_energy')|float(0) +
            states('sensor.shellyem3_c45bbe55c55e_channel_b_energy')|float(0) + 
            states('sensor.shellyem3_c45bbe55c55e_channel_c_energy')|float(0) }}
      {% else %}
        {{ this.state }}
      {% endif %}

- sensor:
  - unique_id: dishwasher_current
    device_class: current
    unit_of_measurement: "A"
    attributes:
      friendly_name: "Diskmaskinen [A]"
    state: "{{(states('sensor.clever_spz3_electric_consumption_w')|float(0) / states('sensor.hem_gen5_electric_consumed_v_3')|float(230))|round(1)}}"
  - unique_id: washingmachine_current
    device_class: current
    unit_of_measurement: "A"
    attributes:
      friendly_name: "Tvättmaskinen [A]"
    state: "{{(states('sensor.clever_spz2_electric_consumption_w_2')|float(0) / states('sensor.hem_gen5_electric_consumed_v_2')|float(230))|round(1)}}"


# väder
- sensor:
  - unique_id: yrwthr
    state: "{%set badWeatherList = 'cloudy','fog','heavyrain','heavyrainandthunder','heavyrainshowers','heavyrainshowersandthunder','heavysleet','heavysleetandthunder','heavysleetshowers','heavysleetshowersandthunder','heavysnow','heavysnowandthunder','heavysnowshowers','heavysnowshowersandthunder','lightrain','lightrainandthunder','lightrainshowers','lightrainshowersandthunder','lightsleet','lightsleetandthunder','lightsleetshowers','lightsnow','lightsnowandthunder','lightsnowshowers','lightssleetshowersandthunder','lightssnowshowersandthunder','rain','rainandthunder','rainshowers','rainshowersandthunder','sleet','sleetandthunder','sleetshowers','sleetshowersandthunder','snow','snowandthunder','snowshowers','snowshowersandthunder'%}{{states('sensor.yr_symbol') in badWeatherList}}"
    attributes:
      friendly_name: "Dåligt väder enligt YR"

  - unique_id: sunelevation
    unit_of_measurement: "°"
    state: "{{ states.sun.sun.attributes.elevation | round(1) }}"
    attributes:
      friendly_name: "Solvinkel"
      
  - unique_id: home_temp
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    attributes:
      friendly_name: "Hemma [°C]"
    state: >-
      {{ states('sensor.231_temperature')|float|round(1) if states('sensor.231_temperature')|float(99) < states('sensor.framsidan_temperature')|float(98) else states('sensor.framsidan_temperature')|float(99)|round(1) }}
    icon: >-
      {% if states("sensor.template_home_temp")|int < 0 -%}
      mdi:thermometer-minus
      {%- elif states("sensor.template_home_temp")|int < 15 -%}
      mdi:thermometer-low
      {%- elif states("sensor.template_home_temp")|int > 25 -%}
      mdi:thermometer-high
      {%- else -%}
      mdi:thermometer
      {%- endif %}

# förbrukning/kostnad
- sensor:
  - unique_id: washing_machine_cost
    state: "{{ (states('sensor.clever_spz2_electric_consumption_w_2') | float(0)/1000) * states('sensor.template_elpris_kr') | float(0) }}"
    unit_of_measurement: kr
    device_class: monetary

  - unique_id: dishwasher_machine_cost
    state: "{{ (states('sensor.clever_spz3_electric_consumption_w') | float(0)/1000) * states('sensor.template_elpris_kr') | float(0) }}"
    unit_of_measurement: kr
    device_class: monetary

  - unique_id: garage_heating_cost
    state: "{{ (states('sensor.popp_outdoor_power') | float(0)/1000) * states('sensor.template_elpris_kr') | float(0) }}"
    unit_of_measurement: kr
    device_class: monetary

  - unique_id: house_cost
    # state: "{{ states('sensor.template_house_power_kw')|float(0) * states('sensor.template_elpris_kr') | float(0) }}"
    state: "{{ (states('sensor.template_house_power_w')|float(0)/1000.0) * states('sensor.template_elpris_kr')|float(0) }}"
    unit_of_measurement: kr
    device_class: monetary

  - unique_id: spot_gain_loss_daily
    state: >-
      {% if states('sensor.energy_used_24_hrs')|is_number and
            state_attr('sensor.energy_used_24_hrs','source_value_valid') and
            state_attr('sensor.energy_used_24_hrs','age_coverage_ratio')|float(0) >= 0.5 and
            states('sensor.energy_used_24_hrs')|float(0) > 0 -%}
        {{ ((states('sensor.energy_x_cost_24_hrs')|float(0) / ((states('sensor.energy_used_24_hrs')|float(0)/1000) * states('sensor.elpriset_kr_avg')|float(0))-1)*100)|round }}
      {%- else -%}
        {{this.state}}
      {%- endif -%}
    unit_of_measurement: '%'

  - unique_id: my_avg_spot_price
    state: >-
      {% if states('sensor.energy_used_24_hrs')|is_number and
            state_attr('sensor.energy_used_24_hrs','source_value_valid') and
            state_attr('sensor.energy_used_24_hrs','age_coverage_ratio')|float(0) >= 0.5 and
            states('sensor.energy_used_24_hrs')|float(0) > 0 -%}
        {{ (states('sensor.energy_x_cost_24_hrs')|float(0) / (states('sensor.energy_used_24_hrs')|float(0)/1000))|round(2) }}
      {%- else -%}
        {{this.state}}
      {%- endif -%}
    unit_of_measurement: kr
    device_class: monetary
    state_class: measurement
    attributes:
      friendly_name: "Snittpris (24 hrs)"

# bilar
- sensor:
  - unique_id: chargenode_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    attributes:
      friendly_name: "ChargeNode [kWh]"
    state: >-
      {% if states('sensor.chargenode_energy')|is_number and
            states('sensor.chargenode_energy')|float(0) > 0 -%}
        {{states('sensor.chargenode_energy')|float(0)}}
      {%- else -%}
        {{ this.state }}
      {%- endif -%}
  - unique_id: chargenode_power_kw
    unit_of_measurement: "kW"
    device_class: power
    attributes:
      friendly_name: "ChargeNode effekt [kW]"
    state: >-
      {{ states('sensor.chargenode_power_l1')|float(0) + states('sensor.chargenode_power_l2')|float(0) + states('sensor.chargenode_power_l3')|float(0) }}
      
## Zoe:n (car 2)
- sensor:
  - unique_id: zoe_battery
    unit_of_measurement: "%"
    state: "{{ states('input_number.car_2_soc')|int}}"
    attributes:
      friendly_name: "Delphine SoC [%]"
    icon: >-
      {% if states('input_number.car_2_soc')|int == 100 -%}
        mdi:battery
      {%- else -%}
        mdi:battery-{{(states('input_number.car_2_soc')|int/10)|round(0,'floor')*10}}
      {%- endif -%}
                                                              
  - unique_id: zoe_charging_power
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Delphine effekt [kW]"
    state: >-
      {% if is_state('sensor.chargenode_port2_state','3') -%}
        {{ states("sensor.template_chargenode_power_kw")|float(0) }}
      {%- else -%}
      {{ 0 | float }}
      {%- endif -%}
    
    # {{ states('sensor.chargenode_power_l1')|float(0) + states('sensor.chargenode_power_l2')|float(0) + states('sensor.chargenode_power_l3')|float(0) }}

  - unique_id: car_2_season_power
    unit_of_measurement: "kW"
    device_class: power
    state: "{{ states('input_number.car_2_power_high')|int if now().month > 2 and now().month < 10 else states('input_number.car_2_power_low')|int }}"
    attributes:
      friendly_name: "Delphine laddeffekt [kW]"

  - unique_id: zoe_charging_cost
    device_class: monetary
    unit_of_measurement: "kr"
    state: "{{ states('sensor.template_zoe_charging_power')|float(0) * states('sensor.template_elpris_kr')|float(0) }}"
  - unique_id: zoe_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ states('sensor.template_zoe_charging_power')|float(0) }}"

  - unique_id: zoe_last_update
    state: "{{states.input_number.car_2_soc.last_updated|as_timestamp|timestamp_custom('%H:%M, %d %b')}}"
    attributes:
      friendly_name: "Senast uppdaterad"

  - unique_id: zoe_charging_required_time
    state: >-      
      {%- set time = (states('input_number.zoe_soc_upper_limit')|float(0) - states('sensor.template_zoe_battery')|float(0)) /100*(states('input_number.car_2_battery')|int)/(states('sensor.template_car_2_season_power')|int) -%}
      {%- set hours = time|int -%}
      {%- set minutes = ((time - hours)*60)|int -%}
      {{ '{:02}:{:02}'.format(hours, minutes) }}
  - unique_id: zoe_req_hours
    state: >-
      {{ ((states('input_number.zoe_soc_upper_limit')|float(0) - states('sensor.template_zoe_battery')|int) /100*(states('input_number.car_2_battery')|int)/(states('sensor.template_car_2_season_power')|int))|round(1, 'ceil') }}
  - unique_id: zoe_charging_cost_last_period
    device_class: monetary
    unit_of_measurement: "kr"
    state: "{{ state_attr('sensor.zoe_kostnad','last_period')|float(0)|round(0) }}"

  - unique_id: car_2_range
    unit_of_measurement: "km"
    state: "{{ (states('sensor.template_zoe_battery')|int(0)*2.575)|round(0) }}"

## Tesla MY (car 1)
- sensor:
  - unique_id: car_1_season_power
    unit_of_measurement: "kW"
    device_class: power
    state: "{{ states('input_number.car_1_power_high')|int if now().month > 2 and now().month < 10 else states('input_number.car_1_power_low')|int }}"
    attributes:
      friendly_name: "Eazy laddeffekt (kW)"

  - unique_id: rya_charging_required_time
    state: >-
      {%- set time = (states('input_number.rya_soc_upper_limit')|float(0) - states('sensor.tesla_battery_level')|float(0)) /100*(states('input_number.car_1_battery')|int)/(states('sensor.template_car_1_season_power')|int) -%}
      {%- set hours = time|int -%}
      {%- set minutes = ((time - hours)*60)|int -%}
      {{ '{:02}:{:02}'.format(hours, minutes) }}
  - unique_id: rya_req_hours
    state: >-
      {{ ((states('input_number.rya_soc_upper_limit')|float(0) - states('sensor.tesla_battery_level')|float(0)) /100*(states('input_number.car_1_battery')|int)/(states('sensor.template_car_1_season_power')|int)) | round(1, 'ceil') }}

  - unique_id: rya_charging_power
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Eazy effekt (kW)"
    state: >-
      {% if is_state('sensor.chargenode_port1_state','3') -%}
        {{ states("sensor.template_chargenode_power_kw")|float(0) }}
      {%- else -%}
      {{ 0 | float }}
      {%- endif -%}
    
    # {{ states('sensor.chargenode_power_l1')|float(0) + states('sensor.chargenode_power_l2')|float(0) + states('sensor.chargenode_power_l3')|float(0) }}

  - unique_id: rya_charging_cost
    device_class: monetary
    unit_of_measurement: "kr"
    state: "{{ states('sensor.template_rya_charging_power')|float(0) * states('sensor.template_elpris_kr')|float(0) }}"

  - unique_id: rya_charging_cost_last_period
    device_class: monetary
    unit_of_measurement: "kr"
    state: "{{ state_attr('sensor.rya_kostnad','last_period')|float(0)|round(0) }}"

## Spabadet
- sensor:
  - unique_id: spabadet_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    attributes:
      friendly_name: "Spabadet, energi [kWh]"
    state: >-
      {{ states('sensor.spabadet_l1_energy')|float(0) + states('sensor.spabadet_l2_energy')|float(0) + states('sensor.spabadet_l3_energy')|float(0) }}

  - unique_id: spabadet_energy_lastmonth_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state: "{{ state_attr('sensor.spabadet_kwh_man','last_period')|float(0)|round(0) }}"
    attributes:
      friendly_name: "Spabadet, energi förra mån [kWh]"

  - unique_id: spabadet_energy_lastweek_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state: "{{ state_attr('sensor.spabadet_kwh_vecka','last_period')|float(0)|round(1) }}"
    attributes:
      friendly_name: "Spabadet, energi förra veckan [kWh]"

  - unique_id: spabadet_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, effekt [kW]"
    state: >-
      {{ ((states('sensor.spabadet_l1_power')|float(0) + states('sensor.spabadet_l2_power')|float(0) + states('sensor.spabadet_l3_power')|float(0))/1000)|round(2) }}

- sensor:
  - unique_id: spabadet_cost_kr
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{ states('sensor.template_elpris_kr')|float(0) * states('sensor.template_spabadet_power_kw')|float(0) }}"

- sensor: 
  - unique_id: spabadet_l1_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L1 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l1_power')|float(0) / states('sensor.hem_gen5_electric_produced_v_2') | float(230)) | round(2) }}

  - unique_id: spabadet_l2_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L2 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l2_power')|float(0) / states('sensor.hem_gen5_electric_produced_v_2_2') | float(230)) | round(2) }}

  - unique_id: spabadet_l3_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L3 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l3_power')|float(0) / states('sensor.hem_gen5_electric_produced_v_3') | float(230)) | round(2) }}

- sensor:
  - unique_id: spabadet_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, temp [°C]"
    state: "{{ states('sensor.spabadet_temperatur')|float(20) }}"

- sensor:
  - unique_id: spabadet_pump_active
    unit_of_measurement: "min"
    device_class: duration
    state_class: total
    attributes:
      friendly_name: "Spabadet, påslaget [min]"
    state: >-
      {% if is_state('switch.spabadet_l3', 'on') %}
        {{ ((as_timestamp(now()) - as_timestamp(states.switch.spabadet_l3.last_changed)) / 60)|int(0) }}
      {% else %}
        0
      {% endif %}

## Räkna ut bästa laddperiod
- trigger:
    - platform: time_pattern
      hours: "/1"
    - platform: state
      entity_id: sensor.template_zoe_req_hours
      to:
    - platform: state
      entity_id: input_datetime.zoe_before
      to:
    - platform: state
      entity_id: sensor.template_rya_req_hours
      to:
    - platform: state
      entity_id: automation.zoe_charge
      to:
    - platform: state
      entity_id: automation.ladda_bilen_nar_det_ar_billigt
      to:
  sensor:
  - unique_id: next_charge
    device_class: timestamp
    state: >-
      {% set duration = states('sensor.template_zoe_req_hours')|float(0) if is_state('automation.zoe_charge','on') else 0 %}
      {% set duration = (duration + (states('sensor.template_rya_req_hours')|float(0) if is_state('automation.ladda_bilen_nar_det_ar_billigt','on') else 0))|round(0,'ceil') %}

      {% set before = today_at(states('input_datetime.zoe_before'))+timedelta(minutes=5) 
          if now() < today_at(states('input_datetime.zoe_before')) 
          else today_at(states('input_datetime.zoe_before'))+timedelta(days=1,minutes=5) %}
      {% if not duration -%}
        unavailable
      {% elif duration <= 0%}
        unavailable
      {% else %}
        {% set grow = namespace(value=0) %}
        {% set priceDict = namespace(value = []) %}
        {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_today')|list %}
        {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_tomorrow')|list%}
        {% if tomorrow | length > 1%}
          {% set prices = prices + tomorrow%}
        {% endif%}
        {% for p in prices%}
          {%set priceDict.value = priceDict.value + [(loop.index, (p.start, p.value))] %}
        {% endfor%}
      
        {% set dataDict = dict.from_keys(priceDict.value) %}
      
        {% set priceDict.value = [] %}
        {% for p in dataDict.items() -%}
          {% set outerIndex = loop.index -%}
          {% if loop.index+duration-1 <= dataDict|length 
              and p[1][0]+timedelta(hours=duration) <= before -%}
            {% for i in range(duration) %}
              {% set grow.value = grow.value + dataDict[i+outerIndex][1] %}
            {% endfor %}
            {%- set val = (grow.value|float/duration)|round(3) %}
            {%- set grow.value = 0 %}
            {%- set priceDict.value = priceDict.value + [(p[1][0], val)] %}
          {% else %}
            {% set priceDict.value = priceDict.value + [(p[1][0], 999.9)] %}
          {% endif %}
        {% endfor %}
        {{ (priceDict.value|sort(attribute='1'))|map(attribute='0')|select('ge',now()-timedelta(minutes=55))|first }}
      {% endif %}
    attributes:
      friendly_name: "Charge period"
      all: >-
        {% set duration = states('sensor.template_zoe_req_hours')|float(0) if is_state('automation.zoe_charge','on') else 0 %}
        {% set duration = (duration + (states('sensor.template_rya_req_hours')|float(0) if is_state('automation.ladda_bilen_nar_det_ar_billigt','on') else 0))|round(0,'ceil') %}
        {% set grow = namespace(value=0) %}
        {% set priceDict = namespace(value = []) %}
        {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','today')|list %}
        {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','tomorrow')|list%}
        {% if tomorrow | length > 1%}
          {% set prices = prices + tomorrow%}
        {% endif%}
        {% for p in prices%}
          {%set priceDict.value = priceDict.value + [(loop.index-1, p)]%}
        {% endfor%}
        
        {% if duration == 0%}
          unavailable
        {% else %}    
          {% set dataDict = dict.from_keys(priceDict.value) %}
      
          {% set priceDict.value = [] %}
          {% for p in dataDict.items() %}
            {% set outerIndex = loop.index %}
            {% if loop.index+duration-1 <= dataDict|length %}
              {% for i in range(duration) %}
                {% set grow.value = grow.value + dataDict[i+outerIndex-1] %}
              {% endfor %}
              {%- set val = (grow.value|float/duration)|round(3) %}
              {%- set grow.value = 0 %}
              {%- set priceDict.value = priceDict.value + [(p[0], val)] %}
            {% else %}
              {% set priceDict.value = priceDict.value + [(p[0], 999.9)] %}
            {% endif %}
          {% endfor %}
          {% set data = dict.from_values(priceDict.value).items()|sort(attribute='1') %}
          {% set priceDict.value = [] %}
          {% for d in data -%}
            {% set t1 = '%02d:00' % (d[0] if d[0]<24 else d[0]-24) -%}
            {% set time1 = '%02d:00' % d[0] if d[0]<24 else '%02d:00⁺¹' % (d[0]-24) -%}
            {% set time2 = '%02d:00' % (d[0]+duration) if (d[0]+duration)<24 else '%02d:00⁺¹' % (d[0]+duration-24) -%}
            {% set priceDict.value = priceDict.value + [time1 ~ '-' ~ time2 ~ ' | ' ~ d[1]|round(2)] %}
          {% endfor -%}
          {{ priceDict.value|replace(",","\xA0")|replace("[","")|replace("]","") }}          
        {% endif %}
  - unique_id: next_charge_time
    state: "{{states('sensor.template_next_charge')|as_timestamp|timestamp_custom('%H:%M')}}"

  - unique_id: next_low_price
    state: >-
      {% set priceDict = namespace(value = []) -%}
      {% set prices = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_today')|list -%}
      {% set tomorrow = state_attr('sensor.nordpool_kwh_se3_sek_3_095_0','raw_tomorrow')|list -%}
      {% if tomorrow | length > 1 -%}
        {% set prices = prices + tomorrow -%}
      {% endif -%}
      {% for p in prices -%}
        {% set priceDict.value = priceDict.value + [(loop.index, (p.start, p.value))] -%}
      {% endfor -%}
      {% set dataDict = dict.from_keys(priceDict.value) -%}
      {% set priceDict.value = [] -%}
      {% for p in dataDict.items() -%}
        {% if (dataDict[loop.index][0] >= now() and (dataDict[loop.index][1]|float) < state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'average')|float) -%}
          {% set priceDict.value = priceDict.value + [dataDict[loop.index][0]] -%}
        {% endif -%}
      {% endfor -%}
      {% if priceDict.value -%}
      {{ (priceDict.value|first).strftime('%H:%M') }}
      {% else -%}
        undefined
      {% endif -%}