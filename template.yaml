- sensor:
  - unique_id: fronius_solar_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('sensor.energy_total_fronius_inverter_1_192_168_2_31') | float(default=0.0) / 1000.0 }}"
    attributes:
      friendly_name: "Fronius solenergi (totalt)"

- sensor:
  - unique_id: fronius_solar_daily_energy
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    state: "{{ states('sensor.energy_day_fronius_inverter_1_192_168_2_31') | float(default=0.0) / 1000.0 }}"
    attributes:
      friendly_name: "Fronius solenergi (idag)"

- sensor:
  - unique_id: fronius_solar_power
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ (states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(default=0.0) / 1000.0) | round(2) }}"
    attributes:
      friendly_name: "Fronius soleffekt"

- sensor: 
  - unique_id: nordpool_current_price
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "SEK/kWh"
    state: "{{ states('sensor.nordpool_kwh_se3_sek_3_095_0') | float | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (ex. moms)"
- sensor: 
  - unique_id: nordpool_current_price_vat
    device_class: monetary
    state_class: measurement
    unit_of_measurement: "SEK/kWh"
    state: "{{ (states('sensor.nordpool_kwh_se3_sek_3_095_0') | float * 1.25) | round(2) }}"
    attributes:
      friendly_name: "Aktuellt elpris (inkl. moms)"    
          
- sensor:
  - unique_id: last_solarenergy_value
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    state: >-
      {% if is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unavailable') or is_state('sensor.energy_total_fronius_inverter_1_192_168_2_31', 'unknown') %}
        {{ states('sensor.last_solarenergy_value') }}
      {% else %}
        {% set last_solarenergy_value = ((states('sensor.energy_total_fronius_inverter_1_192_168_2_31') | float / 1000) | float) %}
        {{ (states('sensor.energy_total_fronius_inverter_1_192_168_2_31')|float / 1000) | float }}
      {% endif %}
    attributes:
      friendly_name: "Solpanelerna, senaste energi"

- sensor:
  - unique_id: last_sp_kw
    unit_of_measurement: "kW"
    state: >-
      {% if is_state('sensor.aktuell_effekt', 'unavailable') or is_state('sensor.aktuell_effekt','unknown') %}
        0
      {% else %}
        {% set last_sp_kw = states("sensor.aktuell_effekt") %}
        {{ states("sensor.aktuell_effekt") }}
      {% endif %}
    attributes:
      friendly_name: "Senaste effekt"

- sensor:
  - unique_id: aza_mileage
    unit_of_measurement: 'mil'
    icon: mdi:counter
    state: "{{ ((states('sensor.azarel_mileage_sensor') | float(0))/10) | round }}"
    attributes:
      friendly_name: "Körsträcka"
- sensor:
  - unique_id: aza_last_update
    state: "{{ as_timestamp(states.sensor.azarel_mileage_sensor.last_updated) | timestamp_custom('%H:%M, %d %b') }}"
    attributes:
      friendly_name: "Senast uppdaterad"
- sensor:
  - unique_id: aza_charging_rate
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ (states('sensor.azarel_charging_rate_sensor') | float(0)/1564*230) | round(1) }}"
    attributes:
      friendly_name: "Azarel effekt"

- sensor:
  - unique_id: house_net_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ ((states('sensor.hem_gen5_electric_consumed_w') | float(0)) / (-1000)) | round(2) }}"
    attributes:
      friendly_name: "Husets nettoeffekt"
- sensor:
  - unique_id: house_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: "{{ ((states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(default=0.0) + states('sensor.hem_gen5_electric_consumed_w') | float) / 1000) | round(2) }}"
    attributes:
      friendly_name: "Husets effekt (kW)"
- sensor:
  - unique_id: grid_power_kw
    state: "{{ (states('sensor.hem_gen5_electric_consumed_w') | float / 1000) | round(2) }}"
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Näteffekt (kW)"
- sensor:
  - unique_id: house_net_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total
    state: >-
      {{ (states('sensor.hem_gen5_electric_consumed_kwh') | float) + states('sensor.template_last_solarenergy_value') | float }}
    attributes:
      friendly_name: "Husets nettoenergi"

# house consumed from grid
- sensor:
  - unique_id: house_power_w
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Husets effekt (W)"
#    state: "{{ (states('sensor.power_ac_fronius_inverter_1_192_168_2_31') | float(0) + states('sensor.hem_gen5_electric_consumed_w') | float) | float }}"
    state: >-
      {% set pwr = 0.0 -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_1') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_1') | float -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_2') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_2') | float + pwr -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_3') | float > 0 -%}
        {%- set pwr = states('sensor.hem_gen5_electric_consumed_w_3') | float + pwr -%}
      {%- endif %}
      {{pwr}}

# sold to grid
- sensor:
  - unique_id: current_sold_grid
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"
    state: >-
      {% set sold = 0.0 -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_1') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_1') | float -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_2') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_2') | float + sold -%}
      {%- endif -%}
      {%- if states('sensor.hem_gen5_electric_consumed_w_3') | float < 0 -%}
        {%- set sold = states('sensor.hem_gen5_electric_consumed_w_3') | float + sold -%}
      {%- endif %}
      {{sold | float * -1}}

    # state: >-
    #   {% if states("sensor.hem_gen5_electric_consumed_w") | float < 0 -%}
    #   {{ states("sensor.hem_gen5_electric_consumed_w") | float * -1 }}
    #   {%- else -%}
    #   {{ 0 | float }}
    #   {%- endif %}
    attributes:
      friendly_name: "Såld effekt"

- sensor:
  - unique_id: yrwthr
    state: "{%set badWeatherList = 'cloudy','fog','heavyrain','heavyrainandthunder','heavyrainshowers','heavyrainshowersandthunder','heavysleet','heavysleetandthunder','heavysleetshowers','heavysleetshowersandthunder','heavysnow','heavysnowandthunder','heavysnowshowers','heavysnowshowersandthunder','lightrain','lightrainandthunder','lightrainshowers','lightrainshowersandthunder','lightsleet','lightsleetandthunder','lightsleetshowers','lightsnow','lightsnowandthunder','lightsnowshowers','lightssleetshowersandthunder','lightssnowshowersandthunder','rain','rainandthunder','rainshowers','rainshowersandthunder','sleet','sleetandthunder','sleetshowers','sleetshowersandthunder','snow','snowandthunder','snowshowers','snowshowersandthunder'%}{{states('sensor.yr_symbol') in badWeatherList}}"
    attributes:
      friendly_name: "Dåligt väder enligt YR"

- sensor: 
  - unique_id: sunelevation
    unit_of_measurement: "°"
    state: "{{ states.sun.sun.attributes.elevation | round(1) }}"
    attributes:
      friendly_name: "Solvinkel"

- binary_sensor:
  - unique_id: nordpool_tomorrow_valid
    # state: "{{ state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow_valid') }}"
    state: "{{ state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow_valid') == true and state_attr('sensor.nordpool_kwh_se3_sek_3_095_0', 'tomorrow')|string|length > 24 }}"

- sensor:
  - unique_id: nordpool_tomorrow_avg
    state: >-
      {% set nordpool = namespace(tomorrow = []) -%}
      {%- if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") -%}
        {%- for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") -%}
            {%- set nordpool.tomorrow = nordpool.tomorrow + [num] -%}
        {%- endfor -%}
        {{ "%.2f" | format(((nordpool.tomorrow | sum / nordpool.tomorrow | count) | float * 1.25)|float)  }}
      {%- endif %}
- sensor:
  - unique_id: nordpool_tomorrow_max
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | max | float * 1.25)|float) }}
      {% endif %}
- sensor:
  - unique_id: nordpool_tomorrow_min
    state: >-
      {% set nordpool = namespace(tomorrow = []) %}
      {% if not is_state("binary_sensor.template_nordpool_tomorrow_valid","off") %}
        {% for num in state_attr("sensor.nordpool_kwh_se3_sek_3_095_0","tomorrow") %}
            {% set nordpool.tomorrow = nordpool.tomorrow + [num] %}
        {% endfor %}
        {{ "%.2f" | format((nordpool.tomorrow | min | float * 1.25)|float) }}
      {% endif %}

- sensor:
  - unique_id: elpris_kr
    state: >-
      {{ states('sensor.template_nordpool_current_price_vat') | float(0) 
          + ((states('var.electric_tax') | float / 100.0)|float) 
          + ((states('var.electric_transfer_cost') | float / 100.0)|float) 
          + ((states('var.electric_fee') | float / 100.0)|float) }}
#    state: "{{ states('sensor.template_nordpool_current_price_vat') | float(0) + 0.57 + 0.075 }}"
    unit_of_measurement: kr
    device_class: monetary
    attributes:
      friendly_name: "Elpris, totalt (kr)"

- sensor:
  - unique_id: washing_machine_cost
    state: "{{ (states('sensor.clever_spz2_electric_consumption_w_2') | float/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary
    
- sensor:
  - unique_id: dishwasher_machine_cost
    state: "{{ (states('sensor.clever_spz3_electric_consumption_w') | float/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary
    
- sensor:
  - unique_id: garage_heating_cost
    state: "{{ (states('sensor.popp_outdoor_power') | float(0)/1000) * states('sensor.template_elpris_kr') | float }}"
    unit_of_measurement: kr
    device_class: monetary

- sensor:
  - unique_id: zoe_charging_cost
    state: "{{ states('sensor.zoe_charging_power') | float(0) * states('sensor.template_elpris_kr') | float }}"
    device_class: monetary
    unit_of_measurement: "kr"

- sensor:
  - unique_id: zoe_power_kw
    state: "{{ states('sensor.zoe_charging_power') | float(0) }}"
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    
- sensor:
  - unique_id: aza_charging_cost
    unit_of_measurement: kr
    device_class: monetary
    state: >-
      {% if is_state('device_tracker.azarel_location_tracker','home') -%}
        {{ states('sensor.template_aza_charging_rate') | float(0) * states('sensor.template_elpris_kr') | float }}
      {%- else -%}
        {{ 0 | float }}
      {%- endif %}
- sensor:
  - unique_id: aza_power_home
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    state: >-
      {% if is_state('device_tracker.azarel_location_tracker','home') -%}
        {{ states('sensor.template_aza_charging_rate') | float(0) }}
      {%- else -%}
        {{ 0 | float }}
      {%- endif -%}
- sensor:
  - unique_id: aza_charging_required_time
    state: >-
      {%- set time = (states('input_number.aza_charge_limit')|float(0) - states('sensor.azarel_battery_sensor')|float(0)) /100*51/11 -%}
      {%- set hours = time|int -%}
      {%- set minutes = ((time - hours)*60)|int -%}
      {{ '{:02}:{:02}'.format(hours, minutes) }}
    
- sensor:
  - unique_id: spabadet_energy_kwh
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    attributes:
      friendly_name: "Spabadet, energi [kWh]"
    state: >-
      {{ states('sensor.spabadet_l1_energy')|float + states('sensor.spabadet_l2_energy')|float + states('sensor.spabadet_l3_energy')|float }}
- sensor:
  - unique_id: spabadet_power_kw
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, effekt [kW]"
    state: >-
      {{ ((states('sensor.spabadet_l1_power')|float + states('sensor.spabadet_l2_power')|float + states('sensor.spabadet_l3_power')|float)/1000)|round(2) }}
- sensor:
  - unique_id: spabadet_cost_kr
    unit_of_measurement: "kr"
    device_class: monetary
    state_class: measurement
    state: "{{ states('sensor.template_elpris_kr')|float * states('sensor.template_spabadet_power_kw')|float }}"
- sensor: 
  - unique_id: spabadet_l1_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L1 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l1_power')|float / states('sensor.hem_gen5_electric_produced_v_2') | float(230)) | round(2) }}
- sensor: 
  - unique_id: spabadet_l2_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L2 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l2_power')|float / states('sensor.hem_gen5_electric_produced_v_2_2') | float(230)) | round(2) }}
- sensor: 
  - unique_id: spabadet_l3_current_a
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    attributes:
      friendly_name: "Spabadet, L3 ström [A]"
    state: >-
      {{ (states('sensor.spabadet_l3_power')|float / states('sensor.hem_gen5_electric_produced_v_3') | float(230)) | round(2) }}
- sensor:
  - unique_id: spabadet_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    state: "{{ states('sensor.247_temperature')|float }}"
